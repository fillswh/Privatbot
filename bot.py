from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
import asyncio
import os
from dotenv import load_dotenv

load_dotenv()

API_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

class BookingStates(StatesGroup):
    action = State()
    date = State()
    route = State()
    contacts = State()

start_kb = types.ReplyKeyboardMarkup(
    keyboard=[[types.KeyboardButton(text="/start")]],
    resize_keyboard=True,
    one_time_keyboard=True,
)

back_kb = types.ReplyKeyboardMarkup(
    keyboard=[[types.KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]],
    resize_keyboard=True,
)

contact_kb = types.ReplyKeyboardMarkup(
    keyboard=[
        [types.KeyboardButton(text="–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)],
        [types.KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
    ],
    resize_keyboard=True,
)

@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–ü—Ä–∏–≤—ñ—Ç! –í–∏–±–µ—Ä—ñ—Ç—å:\n1. –®—É–∫–∞—é –ø–µ—Ä–µ–≤—ñ–∑–Ω–∏–∫–∞\n2. –ü—Ä–æ–ø–æ–Ω—É—é –ø–æ—Å–ª—É–≥—É\n\n–ù–∞–ø–∏—à—ñ—Ç—å 1 –∞–±–æ 2."
    )
    await state.set_state(BookingStates.action)

@dp.message(BookingStates.action)
async def process_action(message: types.Message, state: FSMContext):
    text = message.text.strip()
    if text == "1":
        await state.update_data(action="–®—É–∫–∞—é –ø–µ—Ä–µ–≤—ñ–∑–Ω–∏–∫–∞")
    elif text == "2":
        await state.update_data(action="–ü—Ä–æ–ø–æ–Ω—É—é –ø–æ—Å–ª—É–≥—É")
    else:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å 1 –∞–±–æ 2.")
        return
    await message.answer("–í–∫–∞–∂—ñ—Ç—å –¥–∞—Ç—É –ø–æ—ó–∑–¥–∫–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 2025-06-01):", reply_markup=back_kb)
    await state.set_state(BookingStates.date)

@dp.message(BookingStates.date)
async def process_date(message: types.Message, state: FSMContext):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await message.answer(
            "–ü—Ä–∏–≤—ñ—Ç! –í–∏–±–µ—Ä—ñ—Ç—å:\n1. –®—É–∫–∞—é –ø–µ—Ä–µ–≤—ñ–∑–Ω–∏–∫–∞\n2. –ü—Ä–æ–ø–æ–Ω—É—é –ø–æ—Å–ª—É–≥—É\n\n–ù–∞–ø–∏—à—ñ—Ç—å 1 –∞–±–æ 2."
        )
        await state.set_state(BookingStates.action)
        return
    await state.update_data(date=message.text.strip())
    await message.answer("–ù–∞–ø–∏—à—ñ—Ç—å –º–∞—Ä—à—Ä—É—Ç –ø–æ—ó–∑–¥–∫–∏:", reply_markup=back_kb)
    await state.set_state(BookingStates.route)

@dp.message(BookingStates.route)
async def process_route(message: types.Message, state: FSMContext):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await message.answer(
            "–í–∫–∞–∂—ñ—Ç—å –¥–∞—Ç—É –ø–æ—ó–∑–¥–∫–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 06-01-2025):", reply_markup=back_kb
        )
        await state.set_state(BookingStates.date)
        return
    await state.update_data(route=message.text.strip())
    await message.answer(
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è –≤–∞—à–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å –π–æ–≥–æ –≤—Ä—É—á–Ω—É:",
        reply_markup=contact_kb,
    )
    await state.set_state(BookingStates.contacts)

@dp.message(BookingStates.contacts)
async def process_contacts(message: types.Message, state: FSMContext):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await message.answer("–ù–∞–ø–∏—à—ñ—Ç—å –º–∞—Ä—à—Ä—É—Ç –ø–æ—ó–∑–¥–∫–∏:", reply_markup=back_kb)
        await state.set_state(BookingStates.route)
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–Ω—Ç–∞–∫—Ç —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É
    if message.contact:
        contact_info = f"{message.contact.first_name or ''} {message.contact.last_name or ''}".strip()
        contact_phone = message.contact.phone_number
        contact = f"{contact_info} –¢–µ–ª–µ—Ñ–æ–Ω: {contact_phone}"
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–ª —Ç–µ–∫—Å—Ç —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏
        contact = message.text.strip()

    await state.update_data(contacts=contact)
    data = await state.get_data()

    text_to_channel = (
        f"üöç {data.get('action')}\n"
        f"üìÖ –î–∞—Ç–∞: {data.get('date')}\n"
        f"üìç –ú–∞—Ä—à—Ä—É—Ç: {data.get('route')}\n"
        f"üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏: {data.get('contacts')}\n"
    )

    try:
        await bot.send_message(CHANNEL_ID, text_to_channel)
        await message.answer("‚úÖ –í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª. –î—è–∫—É—î–º–æ!", reply_markup=start_kb)
    except Exception as e:
        await message.answer(
            f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –∫–∞–Ω–∞–ª: {e}", reply_markup=start_kb
        )

    await state.clear()

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

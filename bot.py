from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
import asyncio
import os
from dotenv import load_dotenv

load_dotenv()

API_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

class BookingStates(StatesGroup):
    action = State()       # –ò—â—É –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–∞ –∏–ª–∏ –ø—Ä–µ–¥–ª–∞–≥–∞—é —É—Å–ª—É–≥—É
    date = State()         # –î–∞—Ç–∞ –ø–æ–µ–∑–¥–∫–∏
    route = State()        # –ú–∞—Ä—à—Ä—É—Ç
    contacts = State()     # –ö–æ–Ω—Ç–∞–∫—Ç—ã

@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ?\n1. –ò—â—É –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–∞\n2. –ü—Ä–µ–¥–ª–∞–≥–∞—é —É—Å–ª—É–≥—É\n\n–ù–∞–ø–∏—à–∏—Ç–µ 1 –∏–ª–∏ 2.")
    await state.set_state(BookingStates.action)

@dp.message(BookingStates.action)
async def process_action(message: types.Message, state: FSMContext):
    text = message.text.strip()
    if text == "1":
        await state.update_data(action="–ò—â—É –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–∞")
    elif text == "2":
        await state.update_data(action="–ü—Ä–µ–¥–ª–∞–≥–∞—é —É—Å–ª—É–≥—É")
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ 1 –∏–ª–∏ 2.")
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø–æ–µ–∑–¥–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-06-01):")
    await state.set_state(BookingStates.date)

@dp.message(BookingStates.date)
async def process_date(message: types.Message, state: FSMContext):
    date = message.text.strip()
    # –¢—É—Ç –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–∞—Ç—ã –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏
    await state.update_data(date=date)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç –ø–æ–µ–∑–¥–∫–∏:")
    await state.set_state(BookingStates.route)

@dp.message(BookingStates.route)
async def process_route(message: types.Message, state: FSMContext):
    route = message.text.strip()
    await state.update_data(route=route)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏:")
    await state.set_state(BookingStates.contacts)

@dp.message(BookingStates.contacts)
async def process_contacts(message: types.Message, state: FSMContext):
    contacts = message.text.strip()
    data = await state.get_data()
    action = data.get("action")
    date = data.get("date")
    route = data.get("route")

    text_to_channel = (
        f"üöç {action}\n"
        f"üìÖ –î–∞—Ç–∞: {date}\n"
        f"üìç –ú–∞—Ä—à—Ä—É—Ç: {route}\n"
        f"üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã: {contacts}\n"
        f"üë§ –û—Ç @{message.from_user.username or message.from_user.full_name} (ID: {message.from_user.id})"
    )

    try:
        await bot.send_message(CHANNEL_ID, text_to_channel)
        await message.answer("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª. –°–ø–∞—Å–∏–±–æ!")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª: {e}")

    await state.clear()

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

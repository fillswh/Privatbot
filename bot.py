from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import asyncio
import os
from dotenv import load_dotenv

load_dotenv()

API_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —à–∞–≥–∏ –¥–∏–∞–ª–æ–≥–∞
class Form(StatesGroup):
    role = State()
    date = State()
    route = State()
    contact = State()

@dp.message(Command("start"))
async def start(message: types.Message, state: FSMContext):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π:\n1. –ò—â—É –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–∞\n2. –ü—Ä–µ–¥–ª–∞–≥–∞—é —É—Å–ª—É–≥—É –ø–µ—Ä–µ–≤–æ–∑–∫–∏")
    await state.set_state(Form.role)

@dp.message(Form.role)
async def process_role(message: types.Message, state: FSMContext):
    role_text = message.text.strip().lower()
    if "–∏—â—É" in role_text:
        await state.update_data(role="–ò—â—É –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–∞")
    elif "–ø—Ä–µ–¥–ª–∞–≥–∞—é" in role_text or "—É—Å–ª—É–≥–∞" in role_text:
        await state.update_data(role="–ü—Ä–µ–¥–ª–∞–≥–∞—é —É—Å–ª—É–≥—É –ø–µ—Ä–µ–≤–æ–∑–∫–∏")
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ '–ò—â—É –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–∞' –∏–ª–∏ '–ü—Ä–µ–¥–ª–∞–≥–∞—é —É—Å–ª—É–≥—É –ø–µ—Ä–µ–≤–æ–∑–∫–∏'.")
        return
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –ø–æ–µ–∑–¥–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.05.2025):")
    await state.set_state(Form.date)

@dp.message(Form.date)
async def process_date(message: types.Message, state: FSMContext):
    await state.update_data(date=message.text.strip())
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ö–∏–µ–≤ ‚Äî –õ—å–≤–æ–≤):")
    await state.set_state(Form.route)

@dp.message(Form.route)
async def process_route(message: types.Message, state: FSMContext):
    await state.update_data(route=message.text.strip())
    await message.answer("–û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (—Ç–µ–ª–µ—Ñ–æ–Ω, Telegram –∏ —Ç.–¥.):")
    await state.set_state(Form.contact)

@dp.message(Form.contact)
async def process_contact(message: types.Message, state: FSMContext):
    await state.update_data(contact=message.text.strip())
    data = await state.get_data()
    
    text = (
        f"üìù –ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:\n"
        f"–¢–∏–ø: {data['role']}\n"
        f"–î–∞—Ç–∞: {data['date']}\n"
        f"–ú–∞—Ä—à—Ä—É—Ç: {data['route']}\n"
        f"–ö–æ–Ω—Ç–∞–∫—Ç—ã: {data['contact']}\n"
        f"–û—Ç: @{message.from_user.username or message.from_user.full_name} (ID: {message.from_user.id})"
    )

    try:
        await bot.send_message(CHANNEL_ID, text)
        await message.answer("‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª.")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")

    await state.clear()

async def main():
    from aiogram.fsm.storage.memory import MemoryStorage
    dp.storage = MemoryStorage()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
import asyncio
import os
from dotenv import load_dotenv

load_dotenv()

API_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

class BookingStates(StatesGroup):
    action = State()       # –®—É–∫–∞—é –ø–µ—Ä–µ–≤—ñ–∑–Ω–∏–∫–∞ –∞–±–æ –Ω–∞–¥–∞—é –ø–æ—Å–ª—É–≥–∏ –ø–∞—Å–∞–∂–∏—Ä—Å—å–∫–∏—Ö –ø–µ—Ä–µ–≤–µ–∑–µ–Ω—å
    date = State()         # –î–∞—Ç–∞ –ø–æ—ó–∑–¥–∫–∏
    route = State()        # –ú–∞—Ä—à—Ä—É—Ç
    contacts = State()     # –ö–æ–Ω—Ç–∞–∫—Ç–∏

start_kb = types.ReplyKeyboardMarkup(
    keyboard=[
        [types.KeyboardButton(text="/start")]
    ],
    resize_keyboard=True,
    one_time_keyboard=True,
)

@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–ü—Ä–∏–≤—ñ—Ç! –í–∏–±–µ—Ä—ñ—Ç—å ?\n1. –®—É–∫–∞—é –ø–µ—Ä–µ–≤—ñ–∑–Ω–∏–∫–∞\n2. –ü—Ä–æ–ø–æ–Ω—É—é –ø–æ—Å–ª—É–≥—É\n\n–ù–∞–ø–∏—à—ñ—Ç—å 1 –∞–±–æ 2.",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.set_state(BookingStates.action)

@dp.message(BookingStates.action)
async def process_action(message: types.Message, state: FSMContext):
    text = message.text.strip()
    if text == "1":
        await state.update_data(action="–®—É–∫–∞—é –ø–µ—Ä–µ–≤—ñ–∑–Ω–∏–∫–∞")
    elif text == "2":
        await state.update_data(action="–ü—Ä–æ–ø–æ–Ω—É—é –ø–æ—Å–ª—É–≥—É")
    else:
        await message.answer("–ë—É–¥—å-–ª–∞—Å–∫–∞, –ù–∞–ø–∏—à—ñ—Ç—å 1 –∞–±–æ 2.")
        return
    await message.answer("–í–∫–∞–∂—ñ—Ç—å –¥–∞—Ç—É –ø–æ—ó–∑–¥–∫–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 2025-06-01):")
    await state.set_state(BookingStates.date)

@dp.message(BookingStates.date)
async def process_date(message: types.Message, state: FSMContext):
    date = message.text.strip()
    # –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—é –¥–∞—Ç–∏ –ø—Ä–∏ –±–∞–∂–∞–Ω–Ω—ñ
    await state.update_data(date=date)
    await message.answer("–ù–∞–ø–∏—à—ñ—Ç—å –º–∞—Ä—à—Ä—É—Ç –ø–æ—ó–∑–¥–∫–∏:")
    await state.set_state(BookingStates.route)

@dp.message(BookingStates.route)
async def process_route(message: types.Message, state: FSMContext):
    route = message.text.strip()
    await state.update_data(route=route)
    await message.answer("–í–∫–∞–∂—ñ—Ç—å –≤–∞—à—ñ –∫–æ–Ω—Ç–∞–∫—Ç–∏ –¥–ª—è –∑–≤'—è–∑–∫—É")
    await state.set_state(BookingStates.contacts)

@dp.message(BookingStates.contacts)
async def process_contacts(message: types.Message, state: FSMContext):
    contacts = message.text.strip()
    data = await state.get_data()
    action = data.get("action")
    date = data.get("date")
    route = data.get("route")

    text_to_channel = (
        f"üöç {action}\n"
        f"üìÖ –î–∞—Ç–∞: {date}\n"
        f"üìç –ú–∞—Ä—à—Ä—É—Ç: {route}\n"
        f"üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏: {contacts}\n"
        f"üë§ –í—ñ–¥ @{message.from_user.username or message.from_user.full_name} (ID: {message.from_user.id})"
    )

    try:
        await bot.send_message(CHANNEL_ID, text_to_channel)
        await message.answer(
            "‚úÖ –í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª. –î—è–∫—É—î–º–æ!",
            reply_markup=start_kb
        )
    except Exception as e:
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –∫–∞–Ω–∞–ª: {e}")

    await state.clear()

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
   
